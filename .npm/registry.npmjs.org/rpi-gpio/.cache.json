{"_id":"rpi-gpio","_rev":"103-990cb60e47dbe4b55584bb2130c9bf00","name":"rpi-gpio","description":"Control Raspberry Pi GPIO pins with node.js","dist-tags":{"latest":"0.8.1"},"versions":{"0.0.1":{"name":"rpi-gpio","author":{"name":"James Barwell","email":"jb@jamesbarwell.co.uk"},"description":"Control Raspberry Pi GPIO pins with node.js","version":"0.0.1","main":"rpi-gpio.js","keywords:":["raspberry","pi","gpio"],"repository":{"type":"git","url":"https://github.com/JamesBarwell/rpi-gpio.js.git"},"devDependencies":{"jasmine-node":"1.0.26"},"_id":"rpi-gpio@0.0.1","dist":{"shasum":"843c9fcee6fd3346a32a268b60131d4900a3cbf6","tarball":"https://registry.npmjs.org/rpi-gpio/-/rpi-gpio-0.0.1.tgz"},"maintainers":[{"name":"jamesbarwell","email":"jb@jamesbarwell.co.uk"}],"directories":{}},"0.0.2":{"name":"rpi-gpio","author":{"name":"James Barwell","email":"jb@jamesbarwell.co.uk"},"description":"Control Raspberry Pi GPIO pins with node.js","version":"0.0.2","main":"rpi-gpio.js","keywords:":["raspberry","pi","gpio"],"repository":{"type":"git","url":"https://github.com/JamesBarwell/rpi-gpio.js.git"},"devDependencies":{"jasmine-node":"1.0.26"},"_id":"rpi-gpio@0.0.2","dist":{"shasum":"09977b4a4f5d74797ad74e926dd3e3b4da91e2d1","tarball":"https://registry.npmjs.org/rpi-gpio/-/rpi-gpio-0.0.2.tgz"},"maintainers":[{"name":"jamesbarwell","email":"jb@jamesbarwell.co.uk"}],"directories":{}},"0.0.3":{"name":"rpi-gpio","author":{"name":"James Barwell","email":"jb@jamesbarwell.co.uk"},"description":"Control Raspberry Pi GPIO pins with node.js","version":"0.0.3","main":"rpi-gpio.js","keywords:":["raspberry","pi","gpio"],"repository":{"type":"git","url":"https://github.com/JamesBarwell/rpi-gpio.js.git"},"devDependencies":{"jasmine-node":"1.0.26"},"_id":"rpi-gpio@0.0.3","dist":{"shasum":"80bab37361746e179199f4f3f869156dbfe8b2f0","tarball":"https://registry.npmjs.org/rpi-gpio/-/rpi-gpio-0.0.3.tgz"},"maintainers":[{"name":"jamesbarwell","email":"jb@jamesbarwell.co.uk"}],"directories":{}},"0.0.4":{"name":"rpi-gpio","author":{"name":"James Barwell","email":"jb@jamesbarwell.co.uk"},"description":"Control Raspberry Pi GPIO pins with node.js","version":"0.0.4","main":"rpi-gpio.js","keywords:":["raspberry","pi","gpio"],"repository":{"type":"git","url":"https://github.com/JamesBarwell/rpi-gpio.js.git"},"devDependencies":{"jasmine-node":"1.0.26"},"_id":"rpi-gpio@0.0.4","dist":{"shasum":"32bebd3f3483b8bf40260a1379878d217c08be95","tarball":"https://registry.npmjs.org/rpi-gpio/-/rpi-gpio-0.0.4.tgz"},"_npmVersion":"1.1.65","_npmUser":{"name":"jamesbarwell","email":"jb@jamesbarwell.co.uk"},"maintainers":[{"name":"jamesbarwell","email":"jb@jamesbarwell.co.uk"}],"directories":{}},"0.1.0":{"name":"rpi-gpio","author":{"name":"James Barwell","email":"jb@jamesbarwell.co.uk"},"description":"Control Raspberry Pi GPIO pins with node.js","version":"0.1.0","main":"rpi-gpio.js","keywords:":["raspberry","pi","gpio"],"repository":{"type":"git","url":"https://github.com/JamesBarwell/rpi-gpio.js.git"},"devDependencies":{"jasmine-node":"~1.14.3","mocha":"~1.18.2","sinon":"~1.9.0","istanbul":"~0.2.7"},"scripts":{"test":"mocha","coverage":"istanbul cover _mocha"},"_id":"rpi-gpio@0.1.0","dist":{"shasum":"03837f74e676f6b8f175e54a512b2d5f61d3055e","tarball":"https://registry.npmjs.org/rpi-gpio/-/rpi-gpio-0.1.0.tgz"},"_from":".","_npmVersion":"1.2.14","_npmUser":{"name":"jamesbarwell","email":"jb@jamesbarwell.co.uk"},"maintainers":[{"name":"jamesbarwell","email":"jb@jamesbarwell.co.uk"}],"directories":{}},"0.2.0":{"name":"rpi-gpio","version":"0.2.0","description":"Control Raspberry Pi GPIO pins with node.js","main":"rpi-gpio.js","keywords:":["raspberry","pi","gpio"],"directories":{"test":"test"},"devDependencies":{"mocha":"~1.18.2","sinon":"~1.9.0","istanbul":"~0.2.7"},"scripts":{"test":"mocha","spec":"mocha --reporter spec","coverage":"istanbul cover _mocha"},"repository":{"type":"git","url":"https://github.com/JamesBarwell/rpi-gpio.js.git"},"author":{"name":"James Barwell","email":"jb@jamesbarwell.co.uk"},"license":"MIT","_id":"rpi-gpio@0.2.0","dist":{"shasum":"1de789cc422af8992b7b9951e24d2c0488cee877","tarball":"https://registry.npmjs.org/rpi-gpio/-/rpi-gpio-0.2.0.tgz"},"_from":".","_npmVersion":"1.2.14","_npmUser":{"name":"jamesbarwell","email":"jb@jamesbarwell.co.uk"},"maintainers":[{"name":"jamesbarwell","email":"jb@jamesbarwell.co.uk"}]},"0.3.1":{"name":"rpi-gpio","version":"0.3.1","description":"Control Raspberry Pi GPIO pins with node.js","main":"rpi-gpio.js","keywords:":["raspberry","pi","gpio"],"directories":{"test":"test"},"devDependencies":{"mocha":"~1.18.2","sinon":"~1.9.0","istanbul":"~0.2.7"},"scripts":{"test":"mocha","spec":"mocha --reporter spec","coverage":"istanbul cover _mocha"},"repository":{"type":"git","url":"https://github.com/JamesBarwell/rpi-gpio.js.git"},"author":{"name":"James Barwell","email":"jb@jamesbarwell.co.uk"},"license":"MIT","_id":"rpi-gpio@0.3.1","dist":{"shasum":"fb348f704868de1c7dfef32a5d9a053162c62835","tarball":"https://registry.npmjs.org/rpi-gpio/-/rpi-gpio-0.3.1.tgz"},"_from":".","_npmVersion":"1.2.14","_npmUser":{"name":"jamesbarwell","email":"jb@jamesbarwell.co.uk"},"maintainers":[{"name":"jamesbarwell","email":"jb@jamesbarwell.co.uk"}]},"0.3.2":{"name":"rpi-gpio","version":"0.3.2","description":"Control Raspberry Pi GPIO pins with node.js","main":"rpi-gpio.js","keywords:":["raspberry","pi","gpio"],"directories":{"test":"test"},"devDependencies":{"mocha":"~1.18.2","sinon":"~1.9.0","istanbul":"~0.2.7"},"scripts":{"test":"mocha","spec":"mocha --reporter spec","coverage":"istanbul cover _mocha"},"repository":{"type":"git","url":"https://github.com/JamesBarwell/rpi-gpio.js.git"},"author":{"name":"James Barwell","email":"jb@jamesbarwell.co.uk"},"license":"MIT","dependencies":{"async":"~0.8.0"},"_id":"rpi-gpio@0.3.2","dist":{"shasum":"f46f5bae1d2a6a0342158d7246ecf6df82bb262b","tarball":"https://registry.npmjs.org/rpi-gpio/-/rpi-gpio-0.3.2.tgz"},"_from":".","_npmVersion":"1.2.14","_npmUser":{"name":"jamesbarwell","email":"jb@jamesbarwell.co.uk"},"maintainers":[{"name":"jamesbarwell","email":"jb@jamesbarwell.co.uk"}]},"0.3.3":{"name":"rpi-gpio","version":"0.3.3","description":"Control Raspberry Pi GPIO pins with node.js","main":"rpi-gpio.js","keywords:":["raspberry","pi","gpio"],"directories":{"test":"test"},"devDependencies":{"mocha":"~1.18.2","sinon":"~1.9.0","istanbul":"~0.2.7"},"scripts":{"test":"mocha","spec":"mocha --reporter spec","coverage":"istanbul cover _mocha"},"repository":{"type":"git","url":"https://github.com/JamesBarwell/rpi-gpio.js.git"},"author":{"name":"James Barwell","email":"jb@jamesbarwell.co.uk"},"license":"MIT","dependencies":{"async":"~0.8.0","debug":"~0.8.1"},"_id":"rpi-gpio@0.3.3","dist":{"shasum":"fed16cee6ffd453962ebe4b7610b6e369f30065f","tarball":"https://registry.npmjs.org/rpi-gpio/-/rpi-gpio-0.3.3.tgz"},"_from":".","_npmVersion":"1.2.14","_npmUser":{"name":"jamesbarwell","email":"jb@jamesbarwell.co.uk"},"maintainers":[{"name":"jamesbarwell","email":"jb@jamesbarwell.co.uk"}]},"0.3.4":{"name":"rpi-gpio","version":"0.3.4","description":"Control Raspberry Pi GPIO pins with node.js","main":"rpi-gpio.js","keywords:":["raspberry","pi","gpio"],"directories":{"test":"test"},"devDependencies":{"mocha":"~1.18.2","sinon":"~1.9.0","istanbul":"~0.2.7"},"scripts":{"test":"mocha","spec":"mocha --reporter spec","coverage":"istanbul cover _mocha"},"repository":{"type":"git","url":"https://github.com/JamesBarwell/rpi-gpio.js.git"},"author":{"name":"James Barwell","email":"jb@jamesbarwell.co.uk"},"license":"MIT","dependencies":{"async":"~0.8.0","debug":"~0.8.1"},"_id":"rpi-gpio@0.3.4","dist":{"shasum":"11b2c95df5f073fde72ad5b134c3387f0aa57451","tarball":"https://registry.npmjs.org/rpi-gpio/-/rpi-gpio-0.3.4.tgz"},"_from":".","_npmVersion":"1.2.14","_npmUser":{"name":"jamesbarwell","email":"jb@jamesbarwell.co.uk"},"maintainers":[{"name":"jamesbarwell","email":"jb@jamesbarwell.co.uk"}]},"0.4.0":{"name":"rpi-gpio","version":"0.4.0","description":"Control Raspberry Pi GPIO pins with node.js","main":"rpi-gpio.js","keywords:":["raspberry","pi","gpio"],"directories":{"test":"test"},"devDependencies":{"mocha":"~1.18.2","sinon":"~1.9.0","istanbul":"~0.2.7"},"scripts":{"test":"mocha","spec":"mocha --reporter spec","coverage":"istanbul cover _mocha"},"repository":{"type":"git","url":"https://github.com/JamesBarwell/rpi-gpio.js.git"},"author":{"name":"James Barwell","email":"jb@jamesbarwell.co.uk"},"license":"MIT","dependencies":{"async":"~0.8.0","debug":"~0.8.1"},"_id":"rpi-gpio@0.4.0","dist":{"shasum":"69662bce05011224f8f9f465c6abfc96885b0eb6","tarball":"https://registry.npmjs.org/rpi-gpio/-/rpi-gpio-0.4.0.tgz"},"_from":".","_npmVersion":"1.2.14","_npmUser":{"name":"jamesbarwell","email":"jb@jamesbarwell.co.uk"},"maintainers":[{"name":"jamesbarwell","email":"jb@jamesbarwell.co.uk"}]},"0.4.1":{"name":"rpi-gpio","version":"0.4.1","description":"Control Raspberry Pi GPIO pins with node.js","main":"rpi-gpio.js","keywords:":["raspberry","pi","gpio"],"directories":{"test":"test"},"devDependencies":{"mocha":"~1.18.2","sinon":"~1.9.0","istanbul":"~0.2.7"},"scripts":{"test":"mocha","spec":"mocha --reporter spec","coverage":"istanbul cover _mocha"},"repository":{"type":"git","url":"https://github.com/JamesBarwell/rpi-gpio.js.git"},"author":{"name":"James Barwell","email":"jb@jamesbarwell.co.uk"},"license":"MIT","dependencies":{"async":"~0.8.0","debug":"~0.8.1"},"_id":"rpi-gpio@0.4.1","dist":{"shasum":"e917bcc86f9bd59725663d82bd301972f2ac1f85","tarball":"https://registry.npmjs.org/rpi-gpio/-/rpi-gpio-0.4.1.tgz"},"_from":".","_npmVersion":"1.2.14","_npmUser":{"name":"jamesbarwell","email":"jb@jamesbarwell.co.uk"},"maintainers":[{"name":"jamesbarwell","email":"jb@jamesbarwell.co.uk"}]},"0.5.0":{"name":"rpi-gpio","version":"0.5.0","description":"Control Raspberry Pi GPIO pins with node.js","main":"rpi-gpio.js","keywords:":["raspberry","pi","gpio"],"directories":{"test":"test"},"devDependencies":{"mocha":"~1.18.2","sinon":"~1.9.0","istanbul":"~0.2.7"},"scripts":{"test":"mocha","spec":"mocha --reporter spec","coverage":"istanbul cover _mocha"},"repository":{"type":"git","url":"https://github.com/JamesBarwell/rpi-gpio.js.git"},"author":{"name":"James Barwell","email":"jb@jamesbarwell.co.uk"},"license":"MIT","dependencies":{"async":"~0.8.0","debug":"~0.8.1"},"_id":"rpi-gpio@0.5.0","dist":{"shasum":"6039f24ea14c1aabb15e70bd922e4b6122508760","tarball":"https://registry.npmjs.org/rpi-gpio/-/rpi-gpio-0.5.0.tgz"},"_from":".","_npmVersion":"1.2.14","_npmUser":{"name":"jamesbarwell","email":"jb@jamesbarwell.co.uk"},"maintainers":[{"name":"jamesbarwell","email":"jb@jamesbarwell.co.uk"}]},"0.5.1":{"name":"rpi-gpio","version":"0.5.1","description":"Control Raspberry Pi GPIO pins with node.js","main":"rpi-gpio.js","keywords:":["raspberry","pi","gpio"],"directories":{"test":"test"},"devDependencies":{"mocha":"~1.18.2","sinon":"~1.9.0","istanbul":"~0.2.7"},"scripts":{"test":"mocha","spec":"mocha --reporter spec","coverage":"istanbul cover _mocha"},"repository":{"type":"git","url":"https://github.com/JamesBarwell/rpi-gpio.js.git"},"author":{"name":"James Barwell","email":"jb@jamesbarwell.co.uk"},"license":"MIT","dependencies":{"async":"~0.8.0","debug":"~0.8.1"},"_id":"rpi-gpio@0.5.1","dist":{"shasum":"30128097421a393f9e6ba4c3cd9611041e734c4d","tarball":"https://registry.npmjs.org/rpi-gpio/-/rpi-gpio-0.5.1.tgz"},"_from":".","_npmVersion":"1.2.14","_npmUser":{"name":"jamesbarwell","email":"jb@jamesbarwell.co.uk"},"maintainers":[{"name":"jamesbarwell","email":"jb@jamesbarwell.co.uk"}]},"0.5.2":{"name":"rpi-gpio","version":"0.5.2","description":"Control Raspberry Pi GPIO pins with node.js","main":"rpi-gpio.js","keywords:":["raspberry","pi","gpio"],"directories":{"test":"test"},"devDependencies":{"mocha":"~1.18.2","sinon":"~1.9.0","istanbul":"~0.2.7"},"scripts":{"test":"mocha","spec":"mocha --reporter spec","coverage":"istanbul cover _mocha"},"repository":{"type":"git","url":"https://github.com/JamesBarwell/rpi-gpio.js.git"},"author":{"name":"James Barwell","email":"jb@jamesbarwell.co.uk"},"license":"MIT","dependencies":{"async":"~0.8.0","debug":"~0.8.1"},"gitHead":"7b530712973205f38e86eac7cc80854d356a9ebf","bugs":{"url":"https://github.com/JamesBarwell/rpi-gpio.js/issues"},"homepage":"https://github.com/JamesBarwell/rpi-gpio.js","_id":"rpi-gpio@0.5.2","_shasum":"87b79880a719fa834541445c2db15a9bc624eefc","_from":".","_npmVersion":"1.4.28","_npmUser":{"name":"jamesbarwell","email":"jb@jamesbarwell.co.uk"},"maintainers":[{"name":"jamesbarwell","email":"jb@jamesbarwell.co.uk"}],"dist":{"shasum":"87b79880a719fa834541445c2db15a9bc624eefc","tarball":"https://registry.npmjs.org/rpi-gpio/-/rpi-gpio-0.5.2.tgz"}},"0.6.0":{"name":"rpi-gpio","version":"0.6.0","description":"Control Raspberry Pi GPIO pins with node.js","main":"rpi-gpio.js","keywords:":["raspberry","pi","gpio"],"directories":{"test":"test"},"devDependencies":{"mocha":"~1.18.2","sinon":"~1.9.0","istanbul":"~0.2.7"},"scripts":{"test":"mocha","spec":"mocha --reporter spec","coverage":"istanbul cover _mocha"},"repository":{"type":"git","url":"git+https://github.com/JamesBarwell/rpi-gpio.js.git"},"author":{"name":"James Barwell","email":"jb@jamesbarwell.co.uk"},"license":"MIT","dependencies":{"async":"~0.8.0","debug":"~0.8.1","epoll":"^0.1.13"},"gitHead":"ff471af8ec39158396dc27a6b09df2324d30c850","bugs":{"url":"https://github.com/JamesBarwell/rpi-gpio.js/issues"},"homepage":"https://github.com/JamesBarwell/rpi-gpio.js#readme","_id":"rpi-gpio@0.6.0","_shasum":"778f448726c99900f5988c0db77ca00e9ca6eef3","_from":".","_npmVersion":"2.11.3","_nodeVersion":"0.12.7","_npmUser":{"name":"jamesbarwell","email":"jb@jamesbarwell.co.uk"},"dist":{"shasum":"778f448726c99900f5988c0db77ca00e9ca6eef3","tarball":"https://registry.npmjs.org/rpi-gpio/-/rpi-gpio-0.6.0.tgz"},"maintainers":[{"name":"jamesbarwell","email":"jb@jamesbarwell.co.uk"}]},"0.7.0":{"name":"rpi-gpio","version":"0.7.0","description":"Control Raspberry Pi GPIO pins with node.js","main":"rpi-gpio.js","keywords:":["raspberry","pi","gpio"],"directories":{"test":"test","integration":"integration"},"devDependencies":{"mocha":"~1.18.2","sinon":"~1.9.0","istanbul":"~0.2.7"},"scripts":{"test":"mocha","spec":"mocha --reporter spec","coverage":"istanbul cover _mocha","int":"mocha test/integration"},"repository":{"type":"git","url":"git+https://github.com/JamesBarwell/rpi-gpio.js.git"},"author":{"name":"James Barwell","email":"jb@jamesbarwell.co.uk"},"license":"MIT","dependencies":{"async":"1.x","debug":"2.x","epoll":"0.1.x"},"gitHead":"a864592b032310b7f3c369e3de0b6864feef3a19","bugs":{"url":"https://github.com/JamesBarwell/rpi-gpio.js/issues"},"homepage":"https://github.com/JamesBarwell/rpi-gpio.js#readme","_id":"rpi-gpio@0.7.0","_shasum":"a71ea43a2701d13ae9003ef0e46c6bcd3dc413ca","_from":".","_npmVersion":"2.11.3","_nodeVersion":"0.12.7","_npmUser":{"name":"jamesbarwell","email":"jb@jamesbarwell.co.uk"},"dist":{"shasum":"a71ea43a2701d13ae9003ef0e46c6bcd3dc413ca","tarball":"https://registry.npmjs.org/rpi-gpio/-/rpi-gpio-0.7.0.tgz"},"maintainers":[{"name":"jamesbarwell","email":"jb@jamesbarwell.co.uk"}]},"0.8.0":{"name":"rpi-gpio","version":"0.8.0","description":"Control Raspberry Pi GPIO pins with node.js","main":"rpi-gpio.js","keywords:":["raspberry","pi","gpio"],"directories":{"test":"test","integration":"integration"},"devDependencies":{"mocha":"~1.18.2","sinon":"~1.9.0","istanbul":"~0.2.7"},"scripts":{"test":"mocha","spec":"mocha --reporter spec","coverage":"istanbul cover _mocha","int":"mocha test/integration"},"repository":{"type":"git","url":"git+https://github.com/JamesBarwell/rpi-gpio.js.git"},"author":{"name":"James Barwell","email":"jb@jamesbarwell.co.uk"},"license":"MIT","dependencies":{"async":"1.x","debug":"2.x","epoll":"0.1.x"},"gitHead":"d1dc5a55eb8c3dc4f1a7fd8f93028d1fedb3f722","bugs":{"url":"https://github.com/JamesBarwell/rpi-gpio.js/issues"},"homepage":"https://github.com/JamesBarwell/rpi-gpio.js#readme","_id":"rpi-gpio@0.8.0","_shasum":"7f9c81e4892759f275bf9476530bfc3ac91296a6","_from":".","_npmVersion":"3.10.10","_nodeVersion":"6.10.2","_npmUser":{"name":"jamesbarwell","email":"jb@jamesbarwell.co.uk"},"dist":{"shasum":"7f9c81e4892759f275bf9476530bfc3ac91296a6","tarball":"https://registry.npmjs.org/rpi-gpio/-/rpi-gpio-0.8.0.tgz"},"maintainers":[{"name":"jamesbarwell","email":"jb@jamesbarwell.co.uk"}],"_npmOperationalInternal":{"host":"packages-12-west.internal.npmjs.com","tmp":"tmp/rpi-gpio-0.8.0.tgz_1492347654826_0.29760742792859674"}},"0.8.1":{"name":"rpi-gpio","version":"0.8.1","description":"Control Raspberry Pi GPIO pins with node.js","main":"rpi-gpio.js","keywords:":["raspberry","pi","gpio"],"directories":{"test":"test","integration":"integration"},"devDependencies":{"mocha":"~1.18.2","sinon":"~1.9.0","istanbul":"~0.2.7"},"scripts":{"test":"mocha","spec":"mocha --reporter spec","coverage":"istanbul cover _mocha","int":"mocha test/integration"},"repository":{"type":"git","url":"git+https://github.com/JamesBarwell/rpi-gpio.js.git"},"author":{"name":"James Barwell","email":"jb@jamesbarwell.co.uk"},"license":"MIT","dependencies":{"async":"1.x","debug":"2.x","epoll":"0.1.x"},"gitHead":"ae815a590c95450cc127d5edb5c8d4292e97e62b","bugs":{"url":"https://github.com/JamesBarwell/rpi-gpio.js/issues"},"homepage":"https://github.com/JamesBarwell/rpi-gpio.js#readme","_id":"rpi-gpio@0.8.1","_shasum":"8d51d41ec0ece02ec7cba26e988b60ede72890a7","_from":".","_npmVersion":"3.10.10","_nodeVersion":"6.10.2","_npmUser":{"name":"jamesbarwell","email":"jb@jamesbarwell.co.uk"},"dist":{"shasum":"8d51d41ec0ece02ec7cba26e988b60ede72890a7","tarball":"https://registry.npmjs.org/rpi-gpio/-/rpi-gpio-0.8.1.tgz"},"maintainers":[{"name":"jamesbarwell","email":"jb@jamesbarwell.co.uk"}],"_npmOperationalInternal":{"host":"packages-12-west.internal.npmjs.com","tmp":"tmp/rpi-gpio-0.8.1.tgz_1492420062837_0.6744827863294631"}}},"readme":"rpi-gpio.js\n==========\n\nControl Raspberry Pi GPIO pins with io.js / node.js\n\n[![Build Status](https://travis-ci.org/JamesBarwell/rpi-gpio.js.svg?branch=master)](https://travis-ci.org/JamesBarwell/rpi-gpio.js)\n[![NPM version](https://badge.fury.io/js/rpi-gpio.svg)](http://badge.fury.io/js/rpi-gpio)\n\n## Supported hardware\n\n* Raspberry Pi 1 Model A\n* Raspberry Pi 1 Model A+\n* Raspberry Pi 1 Model B\n* Raspberry Pi 1 Model B+\n* Raspberry Pi 2 Model B\n\n### Unknown - please raise an issue to let us know if this works for you\n\n* Raspberry Pi 3 Model B\n* Raspberry Pi Zero\n\n## Setup\nSee this guide on how to get [node.js running on Raspberry Pi](https://learn.adafruit.com/node-embedded-development/installing-node-dot-js).\n\nThis module can then be installed with npm:\n```\nnpm install rpi-gpio\n```\n\n### Dependency\n\nIf you are having trouble installing this module make sure you are running gcc/g++ `-v 4.8` or higher. [Here](https://github.com/fivdi/onoff/wiki/Node.js-v4-and-native-addons) is an installation guide.\n\n## Usage\nFirstly, make make sure you are running your application as root or with sudo, else the Raspberry Pi will not let you output to the GPIO.\n\nBefore you can read or write, you must use setup() to open a channel, and must specify whether it will be used for input or output. Having done this, you can then read in the state of the channel or write a value to it using read() or write().\n\nAll of the functions relating to the pin state within this module are asynchronous, so where necessary - for example in reading the value of a channel - a callback must be provided. This module inherits the standard [EventEmitter](http://nodejs.org/api/events.html), so you may use its functions to listen to events.\n\nPlease note that there are two different and confusing ways to reference a channel; either using the Raspberry Pi or the BCM/SoC naming schema (sadly, neither of which match the physical pins!). This module supports both schemas, with Raspberry Pi being the default. Please see [this page](http://elinux.org/RPi_Low-level_peripherals) for more details.\n\n## API\n\n### Methods\n\n#### setup(channel [, direction, edge], callback)\nSets up a channel for read or write. Must be done before the channel can be used.\n* channel: Reference to the pin in the current mode's schema.\n* direction: The pin direction, pass either DIR_IN for read mode or DIR_OUT for write mode. You can also pass DIR_LOW or DIR_HIGH to use the write mode and specify an initial state of 'off' or 'on' respectively. Defaults to DIR_OUT.\n* edge: Interrupt generating GPIO chip setting, pass in EDGE_NONE for no interrupts, EDGE_RISING for interrupts on rising values, EDGE_FALLING for interrupts on falling values or EDGE_BOTH for all interrupts.\nDefaults to EDGE_NONE.\n* callback: Provides Error as the first argument if an error occurred.\n\n#### read(channel, callback)\nReads the value of a channel.\n* channel: Reference to the pin in the current mode's schema.\n* callback: Provides Error as the first argument if an error occured, otherwise the pin value boolean as the second argument.\n\n#### write(channel, value [, callback])\nWrites the value of a channel.\n* channel: Reference to the pin in the current mode's schema.\n* value: Boolean value to specify whether the channel will turn on or off.\n* callback: Provides Error as the first argument if an error occured.\n\n#### setMode(mode)\nSets the channel addressing schema.\n* mode: Specify either Raspberry Pi or SoC/BCM pin schemas, by passing MODE_RPI or MODE_BCM. Defaults to MODE_RPI.\n\n#### input()\nAlias of read().\n\n#### output()\nAlias of write().\n\n#### destroy()\nTears down any previously set up channels.\n\n#### reset()\nTears down the module state - used for testing.\n\n### Events\nSee Node [EventEmitter](http://nodejs.org/api/events.html) for documentation on listening to events.\n\n#### change\nEmitted when the value of a channel changed\n* channel\n* value\n\n## Examples\n\n### Setup and read the value of a pin\n```js\nvar gpio = require('rpi-gpio');\n\ngpio.setup(7, gpio.DIR_IN, readInput);\n\nfunction readInput() {\n    gpio.read(7, function(err, value) {\n        console.log('The value is ' + value);\n    });\n}\n```\n\n### Setup and write to a pin\n```js\nvar gpio = require('rpi-gpio');\n\ngpio.setup(7, gpio.DIR_OUT, write);\n\nfunction write() {\n    gpio.write(7, true, function(err) {\n        if (err) throw err;\n        console.log('Written to pin');\n    });\n}\n```\n\n### Setup and write to a pin that starts as on\nThis example shows how to setup the pin for write mode with the default state as\n\"on\". Why do this? It can sometimes be useful to reverse the default initial\nstate due to wiring or uncontrollable circumstances.\n```js\nvar gpio = require('rpi-gpio');\n\ngpio.setup(7, gpio.DIR_HIGH, write);\n\nfunction write() {\n    gpio.write(7, false, function(err) {\n        if (err) throw err;\n        console.log('Written to pin');\n    });\n}\n```\n\n### Listen for changes on a pin\n```js\nvar gpio = require('rpi-gpio');\n\ngpio.on('change', function(channel, value) {\n\tconsole.log('Channel ' + channel + ' value is now ' + value);\n});\ngpio.setup(7, gpio.DIR_IN, gpio.EDGE_BOTH);\n```\n\n### Unexport pins opened by the module when finished\n```js\nvar gpio = require('../rpi-gpio');\n\ngpio.on('export', function(channel) {\n    console.log('Channel set: ' + channel);\n});\n\ngpio.setup(7, gpio.DIR_OUT);\ngpio.setup(15, gpio.DIR_OUT);\ngpio.setup(16, gpio.DIR_OUT, pause);\n\nfunction pause() {\n    setTimeout(closePins, 2000);\n}\n\nfunction closePins() {\n    gpio.destroy(function() {\n        console.log('All pins unexported');\n    });\n}\n```\n\n\n### Voltage cycling a pin\nThis example shows how to set up a channel for output mode. After it is set up, it executes a callback which in turn calls another, causing the voltage to alternate up and down three times.\n```js\nvar gpio = require('rpi-gpio');\n\nvar pin   = 7;\nvar delay = 2000;\nvar count = 0;\nvar max   = 3;\n\ngpio.setup(pin, gpio.DIR_OUT, on);\n\nfunction on() {\n    if (count >= max) {\n        gpio.destroy(function() {\n            console.log('Closed pins, now exit');\n        });\n        return;\n    }\n\n    setTimeout(function() {\n        gpio.write(pin, 1, off);\n        count += 1;\n    }, delay);\n}\n\nfunction off() {\n    setTimeout(function() {\n        gpio.write(pin, 0, on);\n    }, delay);\n}\n```\n\n### Using flow control modules\nDue to the asynchronous nature of this module, using an asynchronous flow control module can help to simplify development. This example uses [async.js](https://github.com/caolan/async) to turn pins on and off in series.\n```js\nvar gpio = require('rpi-gpio');\nvar async = require('async');\n\nasync.parallel([\n    function(callback) {\n        gpio.setup(7, gpio.DIR_OUT, callback)\n    },\n    function(callback) {\n        gpio.setup(15, gpio.DIR_OUT, callback)\n    },\n    function(callback) {\n        gpio.setup(16, gpio.DIR_OUT, callback)\n    },\n], function(err, results) {\n    console.log('Pins set up');\n    write();\n});\n\nfunction write() {\n    async.series([\n        function(callback) {\n            delayedWrite(7, true, callback);\n        },\n        function(callback) {\n            delayedWrite(15, true, callback);\n        },\n        function(callback) {\n            delayedWrite(16, true, callback);\n        },\n        function(callback) {\n            delayedWrite(7, false, callback);\n        },\n        function(callback) {\n            delayedWrite(15, false, callback);\n        },\n        function(callback) {\n            delayedWrite(16, false, callback);\n        },\n    ], function(err, results) {\n        console.log('Writes complete, pause then unexport pins');\n        setTimeout(function() {\n            gpio.destroy(function() {\n                console.log('Closed pins, now exit');\n            });\n        }, 500);\n    });\n};\n\nfunction delayedWrite(pin, value, callback) {\n    setTimeout(function() {\n        gpio.write(pin, value, callback);\n    }, 500);\n}\n```\n\n## Contributing\nContributions are appreciated, both in the form of bug reports and pull requests.\n\nDue to the nature of this project it can be quite time-consuming to test against real hardware, so the automated test suite is all the more important. I will not accept any pull requests that cause the build to fail, and probably will not accept any that do not have corresponding test coverage.\n\nYou can run the tests with npm:\n```\nnpm test\n```\nand create a coverage report with:\n```\nnpm run coverage\n```\nThere is also an integration test that you can run on Raspberry Pi hardware, having connected two GPIO pins across a resistor. The command to run the test will provide further instructions on how to set up the hardware:\n```\nnpm run int\n```\n\nThe tests use [mochajs](http://mochajs.org) as the test framework, and [Sinon.JS](http://sinonjs.org) to stub and mock out file system calls.\n","maintainers":[{"name":"jamesbarwell","email":"jb@jamesbarwell.co.uk"}],"time":{"modified":"2017-09-01T08:40:34.608Z","created":"2012-06-24T15:35:13.030Z","0.0.1":"2012-06-24T15:35:15.077Z","0.0.2":"2012-06-25T21:22:09.126Z","0.0.3":"2012-06-26T09:52:25.270Z","0.0.4":"2013-01-11T21:51:20.121Z","0.1.0":"2014-05-12T09:46:01.462Z","0.3.0":"2014-05-14T12:16:47.976Z","0.2.0":"2014-05-14T12:18:18.060Z","0.3.1":"2014-05-14T12:23:40.216Z","0.3.2":"2014-05-18T15:59:52.281Z","0.3.3":"2014-05-25T18:23:14.836Z","0.3.4":"2014-05-27T11:31:36.648Z","0.4.0":"2014-06-24T12:27:08.108Z","0.4.1":"2014-06-29T15:27:21.407Z","0.5.0":"2014-07-14T11:47:59.936Z","0.5.1":"2014-11-25T17:25:03.872Z","0.5.2":"2015-05-29T07:28:02.177Z","0.6.0":"2015-08-03T07:51:06.533Z","0.7.0":"2015-09-22T08:50:30.114Z","0.8.0":"2017-04-16T13:00:56.754Z","0.8.1":"2017-04-17T09:07:44.953Z"},"author":{"name":"James Barwell","email":"jb@jamesbarwell.co.uk"},"repository":{"type":"git","url":"git+https://github.com/JamesBarwell/rpi-gpio.js.git"},"readmeFilename":"README.md","license":"MIT","users":{"projectweekend":true,"developit":true,"pdilyard":true,"sangallimarco":true,"edusig":true,"ibakaidov":true,"donvercety":true,"meatherly":true,"deepankar":true,"viking":true,"ivansivak":true,"semencov":true,"goliatone":true,"carbonspike":true,"nickeltobias":true,"albert.tra":true,"jooseem":true,"waynekim":true,"bpatel":true,"chalkyjoe":true,"leondacosta":true,"glek":true,"bfalmeida":true,"gatien1":true,"hillct":true,"tdamdouni":true,"leizongmin":true},"homepage":"https://github.com/JamesBarwell/rpi-gpio.js#readme","bugs":{"url":"https://github.com/JamesBarwell/rpi-gpio.js/issues"},"_attachments":{},"_etag":"W/\"59a91d02-6fc0\"","_lastModified":"Fri, 01 Sep 2017 08:40:34 GMT"}